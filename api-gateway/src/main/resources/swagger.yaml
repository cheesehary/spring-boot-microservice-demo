swagger: "2.0"
info:
  description: "This is a sample api gateway."
  version: "0.0.1"
  title: "API Gateway"
  contact:
    email: "yuheng.wang@servian.com"
host: "localhost:8080"
basePath: "/apiv1"
tags:
- name: "customer"
  description: "Everything about customer service"
schemes:
- "https"
- "http"
consumes:
- application/json
produces:
- application/json
paths:
  /customers:
    get:
      tags:
      - "customer"
      summary: "Find all customers"
      parameters:
      - in: query
        name: page
        type: integer
        description: page number
        default: 0
      - in: query
        name: size
        type: integer
        description: size of a page
        default: 10
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomerList"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
      - "customer"
      summary: "Add a new customer"
      parameters:
      - in: "body"
        name: "body"
        description: "CustomerWithDetail object to be added"
        required: true
        schema:
          type: object
          required:
          - firstName
          - lastName
          properties:
            firstName:
              type: "string"
            lastName:
              type: "string"
            dob:
              type: "string"
              format: "date"
            reserve:
              type: "string"
            homeAddress:
              type: "string"
            emailAddress:
              type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomerWithDetail"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - "customer"
      summary: "Update an existing customer"
      parameters:
      - in: "body"
        name: "body"
        description: "New CustomerWithDetail object to be updated"
        required: true
        schema:
          type: object
          required:
          - id
          - firstName
          - lastName
          properties:
            id:
              type: "integer"
              format: "int32"
            firstName:
              type: "string"
            lastName:
              type: "string"
            dob:
              type: "string"
              format: "date"
            reserve:
              type: "string"
            homeAddress:
              type: "string"
            emailAddress:
              type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomerWithDetail"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /customers/{customerId}:
    get:
      tags:
      - "customer"
      summary: "Find a customer by ID"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomerWithDetail"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "customer"
      summary: "Delete a customer"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  Customer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      firstName:
        type: "string"
      lastName:
        type: "string"
      dob:
        type: "string"
        format: "date"
      reserve:
        type: "string"
        description: "reserved field"
  CustomerWithDetail:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      firstName:
        type: "string"
      lastName:
        type: "string"
      dob:
        type: "string"
        format: "date"
      reserve:
        type: "string"
        description: "reserved field"
      homeAddress:
        type: "string"
      emailAddress:
        type: "string"
  CustomerList:
    type: "object"
    properties:
      customers:
        type: array
        items:
          $ref: "#/definitions/Customer"
  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"